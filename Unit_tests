
CLASS lcl_big_integer DEFINITION FOR TESTING
  DURATION SHORT
  RISK LEVEL HARMLESS
.
*?ï»¿<asx:abap xmlns:asx="http://www.sap.com/abapxml" version="1.0">
*?<asx:values>
*?<TESTCLASS_OPTIONS>
*?<TEST_CLASS>lcl_Big_Integer
*?</TEST_CLASS>
*?<TEST_MEMBER>f_Cut
*?</TEST_MEMBER>
*?<OBJECT_UNDER_TEST>ZCL_BIG_INTEGER
*?</OBJECT_UNDER_TEST>
*?<OBJECT_IS_LOCAL/>
*?<GENERATE_FIXTURE>X
*?</GENERATE_FIXTURE>
*?<GENERATE_CLASS_FIXTURE>X
*?</GENERATE_CLASS_FIXTURE>
*?<GENERATE_INVOCATION>X
*?</GENERATE_INVOCATION>
*?<GENERATE_ASSERT_EQUAL>X
*?</GENERATE_ASSERT_EQUAL>
*?</TESTCLASS_OPTIONS>
*?</asx:values>
*?</asx:abap>
  PRIVATE SECTION.
    DATA:
      f_cut TYPE REF TO zcl_big_integer.  "class under test

    CLASS-METHODS: class_setup.
    CLASS-METHODS: class_teardown.
    METHODS: setup.
    METHODS: teardown.
    " Invalid number
    METHODS constructor_invalid FOR TESTING.
    METHODS constructor_invalid_long FOR TESTING.
    " Sign
    METHODS sign_positive FOR TESTING.
    METHODS sign_zero FOR TESTING.
    METHODS sign_negative FOR TESTING.
    " Number as string
    METHODS to_string_zero FOR TESTING.
    METHODS to_string_zero_zero FOR TESTING.
    METHODS to_string_zero_zero_zero FOR TESTING.
    METHODS to_string_zero_number FOR TESTING.
    METHODS to_string_single_digit FOR TESTING.
    METHODS to_string_more_digits FOR TESTING.
    METHODS to_string_positive FOR TESTING.
    METHODS to_string_negative FOR TESTING.
    " Number as array
    METHODS to_array_zero FOR TESTING.
    METHODS to_array_zero_zero FOR TESTING.
    METHODS to_array_zero_zero_zero FOR TESTING.
    METHODS to_array_zero_number FOR TESTING.
    METHODS to_array_single_digit FOR TESTING.
    METHODS to_array_more_digits FOR TESTING.
    METHODS to_array_positive FOR TESTING.
    METHODS to_array_negative FOR TESTING.
    " Equals
    METHODS equals_zero_zero FOR TESTING.
    METHODS equals_zero_positive FOR TESTING.
    METHODS equals_zero_negative FOR TESTING.
    METHODS equals_positive_to_zero FOR TESTING.
    METHODS equals_positive_to_same FOR TESTING.
    METHODS equals_positive_to_greater_pos FOR TESTING.
    METHODS equals_positive_to_lower_pos FOR TESTING.
    METHODS equals_positive_to_negativ FOR TESTING.
    METHODS equals_negative_to_zero FOR TESTING.
    METHODS equals_negative_to_lower_neg FOR TESTING.
    METHODS equals_negative_to_greater_neg FOR TESTING.
    METHODS equals_negative_to_positive FOR TESTING.
    " Absolute value
    METHODS abs_positive FOR TESTING.
    METHODS abs_zero FOR TESTING.
    METHODS abs_negative FOR TESTING.
    " Add
    METHODS add_zero_and_zero FOR TESTING.
    METHODS add_zero_and_positive FOR TESTING.
    METHODS add_zero_and_negative FOR TESTING.
    METHODS add_positive_and_zero FOR TESTING.
    METHODS add_negative_and_zero FOR TESTING.
    METHODS add_positive_and_positive FOR TESTING.
    METHODS add_positive_and_negative FOR TESTING.
    METHODS add_negative_and_negative FOR TESTING.
    " Subtract
    METHODS subtract_zero_and_zero FOR TESTING.
    METHODS subtract_zero_and_positive FOR TESTING.
    METHODS subtract_zero_and_negative FOR TESTING.
    METHODS subtract_positive_and_zero FOR TESTING.
    METHODS subtract_negative_and_zero FOR TESTING.
    METHODS subtract_positive_and_positive FOR TESTING.
    METHODS subtract_positive_and_negative FOR TESTING.
    METHODS subtract_negative_and_positive FOR TESTING.
    METHODS subtract_negative_and_negative FOR TESTING.

ENDCLASS.       "lcl_Big_Integer


CLASS lcl_big_integer IMPLEMENTATION.

  METHOD class_setup.



  ENDMETHOD.


  METHOD class_teardown.



  ENDMETHOD.


  METHOD setup.

    DATA iv_number TYPE string.

    iv_number = '0'.

    TRY.
        CREATE OBJECT f_cut
          EXPORTING
            iv_number = iv_number.
      CATCH zcx_no_valid_number.
    ENDTRY.
  ENDMETHOD.


  METHOD teardown.



  ENDMETHOD.

  METHOD constructor_invalid.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |A| ).
      CATCH zcx_no_valid_number.
        cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD constructor_invalid_long.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |1A2| ).
      CATCH zcx_no_valid_number.
        cl_abap_unit_assert=>assert_true( act = abap_true ).
    ENDTRY.

  ENDMETHOD.

  METHOD sign_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |25| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = zcl_big_integer=>mc_sign_positive ).

  ENDMETHOD.

  METHOD sign_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = || ).

  ENDMETHOD.

  METHOD sign_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-29| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = zcl_big_integer=>mc_sign_negative ).

  ENDMETHOD.

  METHOD to_string_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |0| ).

  ENDMETHOD.

  METHOD to_string_zero_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |00| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |0| ).

  ENDMETHOD.

  METHOD to_string_zero_zero_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |000| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |0| ).

  ENDMETHOD.

  METHOD to_string_zero_number.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0012| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |12| ).

  ENDMETHOD.

  METHOD to_string_single_digit.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |3| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |3| ).

  ENDMETHOD.

  METHOD to_string_more_digits.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |574| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |574| ).

  ENDMETHOD.

  METHOD to_string_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |+63| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |63| ).

  ENDMETHOD.

  METHOD to_string_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-727| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-727| ).

  ENDMETHOD.

  METHOD to_array_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 0 ) ) ).

  ENDMETHOD.

  METHOD to_array_zero_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |00| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 0 ) ) ).

  ENDMETHOD.

  METHOD to_array_zero_zero_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |000| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 0 ) ) ).

  ENDMETHOD.

  METHOD to_array_zero_number.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |00857| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 8 ) ( 5 ) ( 7 ) ) ).

  ENDMETHOD.

  METHOD to_array_single_digit.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |4| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 4 ) ) ).

  ENDMETHOD.

  METHOD to_array_more_digits.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |842| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 8 ) ( 4 ) ( 2 ) ) ).

  ENDMETHOD.

  METHOD to_array_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |+63| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 6 ) ( 3 ) ) ).

  ENDMETHOD.

  METHOD to_array_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-512| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_array( )
                                        exp = VALUE zif_big_integer=>tt_digits( ( 5 ) ( 1 ) ( 2 ) ) ).

  ENDMETHOD.

  METHOD equals_zero_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 0 ).

  ENDMETHOD.

  METHOD equals_zero_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |4| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = -1 ).

  ENDMETHOD.

  METHOD equals_zero_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |-52| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 1 ).

  ENDMETHOD.


  METHOD equals_positive_to_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |34| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 1 ).

  ENDMETHOD.

  METHOD equals_positive_to_same.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |46| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |46| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 0 ).

  ENDMETHOD.

  METHOD equals_positive_to_greater_pos.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |114| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |854| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = -1 ).

  ENDMETHOD.

  METHOD equals_positive_to_lower_pos.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |221| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |79| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 1 ).

  ENDMETHOD.

  METHOD equals_positive_to_negativ.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |77| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |-5| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 1 ).

  ENDMETHOD.

  METHOD equals_negative_to_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-853| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = -1 ).

  ENDMETHOD.

  METHOD equals_negative_to_lower_neg.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-79| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |-95| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = 1 ).

  ENDMETHOD.

  METHOD equals_negative_to_greater_neg.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-25| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |-8| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = -1 ).

  ENDMETHOD.

  METHOD equals_negative_to_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-651| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_compare) = zcl_big_integer_factory=>create( |35| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->equals( lo_big_integer_to_compare )
                                        exp = -1 ).

  ENDMETHOD.

  METHOD abs_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |57| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->abs( ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = |+| ).

  ENDMETHOD.

  METHOD abs_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->abs( ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = || ).

  ENDMETHOD.

  METHOD abs_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-624| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->abs( ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->get_sign( )
                                        exp = |+| ).

  ENDMETHOD.

  METHOD add_zero_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |0| ).

  ENDMETHOD.

  METHOD add_zero_and_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |85| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |85| ).

  ENDMETHOD.

  METHOD add_zero_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |-35| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-35| ).

  ENDMETHOD.

  METHOD add_positive_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |75| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |75| ).

  ENDMETHOD.

  METHOD add_negative_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-11| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-11| ).

  ENDMETHOD.

  METHOD add_positive_and_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |45| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |17| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |62| ).

  ENDMETHOD.

  METHOD add_positive_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |45| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |-8| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |37| ).

  ENDMETHOD.

  METHOD add_negative_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-84| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_add) = zcl_big_integer_factory=>create( |-47| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->add( lo_big_integer_to_add ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-131| ).

  ENDMETHOD.

  METHOD subtract_zero_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |0| ).

  ENDMETHOD.

  METHOD subtract_zero_and_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |874| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-874| ).

  ENDMETHOD.

  METHOD subtract_zero_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |-17| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |17| ).

  ENDMETHOD.

  METHOD subtract_positive_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |56| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |56| ).

  ENDMETHOD.

  METHOD subtract_negative_and_zero.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-22| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |0| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-22| ).

  ENDMETHOD.

  METHOD subtract_positive_and_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |39| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |17| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |22| ).

  ENDMETHOD.

  METHOD subtract_positive_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |87| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |-27| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |114| ).

  ENDMETHOD.

  METHOD subtract_negative_and_positive.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-26| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |15| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-41| ).

  ENDMETHOD.

  METHOD subtract_negative_and_negative.

    TRY.
        DATA(lo_big_integer) = zcl_big_integer_factory=>create( |-46| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    TRY.
        DATA(lo_big_integer_to_subtract) = zcl_big_integer_factory=>create( |-39| ).
      CATCH zcx_no_valid_number.
    ENDTRY.

    lo_big_integer->subtract( lo_big_integer_to_subtract ).

    cl_abap_unit_assert=>assert_equals( act = lo_big_integer->to_string( )
                                        exp = |-7| ).

  ENDMETHOD.


ENDCLASS.
