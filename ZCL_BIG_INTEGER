CLASS zcl_big_integer DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_big_integer .

    ALIASES abs
      FOR zif_big_integer~abs .
    ALIASES add
      FOR zif_big_integer~add .
    ALIASES divide
      FOR zif_big_integer~divide .
    ALIASES equals
      FOR zif_big_integer~equals .
    ALIASES get_sign
      FOR zif_big_integer~get_sign .
    ALIASES multiply
      FOR zif_big_integer~multiply .
    ALIASES subtract
      FOR zif_big_integer~subtract .
    ALIASES to_array
      FOR zif_big_integer~to_array .
    ALIASES to_string
      FOR zif_big_integer~to_string .
    ALIASES tt_digits
      FOR zif_big_integer~tt_digits .

    CONSTANTS mc_sign_negative TYPE char01 VALUE '-' ##NO_TEXT.
    CONSTANTS mc_sign_positive TYPE char01 VALUE '+' ##NO_TEXT.

    METHODS constructor
      IMPORTING
        !iv_number TYPE string
      RAISING
        zcx_no_valid_number .
  PROTECTED SECTION.
private section.

  constants MC_ZERO type STRING value '0' ##NO_TEXT.
  data MT_DIGITS type TT_DIGITS .
  data MT_ZERO type TT_DIGITS .
  data MV_SIGN type CHAR01 .

  methods ADD_TWO_NUMBERS
    importing
      !IT_DIGITS type TT_DIGITS
      !IT_DIGITS_TO_ADD type TT_DIGITS
    returning
      value(RT_RESULT) type TT_DIGITS .
  methods COMPARE_EQUAL_LENGTH_NUMBERS
    importing
      !IT_DIGITS_TO_COMPARE type TT_DIGITS
    returning
      value(RV_EQUALS) type I .
  methods CONVERT_ARRAY_TO_STRING
    importing
      !IT_NUMBER type TT_DIGITS
    returning
      value(RV_NUMBER) type STRING .
  methods CONVERT_STRING_TO_ARRAY
    importing
      !IV_NUMBER type STRING
    returning
      value(RT_NUMBER) type TT_DIGITS .
  methods DECIDE_SIGN
    importing
      !IV_NUMBER type STRING
    returning
      value(RV_SIGN) type CHAR01 .
  methods INITIALIZE_ZERO .
  methods REMOVE_NEGATIVE_SIGN
    importing
      !IV_NUMBER type STRING
    returning
      value(RV_NUMBER) type STRING .
  methods REVERSE_EQUAL
    importing
      !IV_EQUALS type I
    returning
      value(RV_EQUALS) type I .
  methods REVERSE_SIGN
    importing
      !IV_SIGN type CHAR01
    returning
      value(RV_SIGN) type CHAR01 .
  methods SUBTRACT_TWO_NUMBERS
    importing
      !IT_DIGITS type TT_DIGITS
      !IT_DIGITS_TO_SUBTRACT type TT_DIGITS
    returning
      value(RT_RESULT) type TT_DIGITS .
ENDCLASS.



CLASS ZCL_BIG_INTEGER IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->ADD_TWO_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS                      TYPE        TT_DIGITS
* | [--->] IT_DIGITS_TO_ADD               TYPE        TT_DIGITS
* | [<-()] RT_RESULT                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_two_numbers.

    DATA(pos_num) = lines( it_digits ).
    DATA(pos_num_to_add) = lines( it_digits_to_add ).
    DATA(remainder) = 0.
    DATA(result) = ||.

    WHILE pos_num        GT 0
       OR pos_num_to_add GT 0.
      DATA(digit) = remainder.
      remainder = 0.
      IF pos_num GT 0.
        digit = digit + it_digits[ pos_num ].
        SUBTRACT 1 FROM pos_num.
      ENDIF.
      IF pos_num_to_add GT 0.
        digit = digit + it_digits_to_add[ pos_num_to_add ].
        SUBTRACT 1 FROM pos_num_to_add.
      ENDIF.
      IF digit GT 9.
        SUBTRACT 10 FROM digit.
        remainder = 1.
      ENDIF.
      result = digit && result.
    ENDWHILE.

    IF remainder EQ 1.
      result = remainder && result.
    ENDIF.

    rt_result = convert_string_to_array( result ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->COMPARE_EQUAL_LENGTH_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS_TO_COMPARE           TYPE        TT_DIGITS
* | [<-()] RV_EQUALS                      TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD compare_equal_length_numbers.

    CHECK lines( mt_digits ) = lines( it_digits_to_compare ).

    LOOP AT mt_digits
         ASSIGNING FIELD-SYMBOL(<ls_digit>).
      DATA(lv_digit) = it_digits_to_compare[ sy-tabix ].
      IF <ls_digit> EQ lv_digit.
        CONTINUE.
      ELSEIF <ls_digit> GT lv_digit.
        rv_equals = 1.
        RETURN.
      ELSE.
        rv_equals = -1.
        RETURN.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [!CX!] ZCX_NO_VALID_NUMBER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    initialize_zero( ).

    DATA(lv_number) = iv_number.

    SHIFT lv_number LEFT DELETING LEADING '0'.

    IF lv_number IS INITIAL.
      lv_number = |0|.
    ELSEIF strlen( lv_number ) EQ 1.
      IF lv_number CN |0123456789|.
        RAISE EXCEPTION TYPE zcx_no_valid_number.
      ENDIF.
    ELSE.
      IF lv_number+0(1) CN |0123456789+-| OR
         lv_number+1    CN |0123456789|.
        RAISE EXCEPTION TYPE zcx_no_valid_number.
      ENDIF.
    ENDIF.

    mv_sign = decide_sign( lv_number ).

    " Remove sign
    IF lv_number+0(1) CN |0123456789|.
      SHIFT lv_number LEFT BY 1 PLACES.
    ENDIF.

    mt_digits = convert_string_to_array( lv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_ARRAY_TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_NUMBER                      TYPE        TT_DIGITS
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_array_to_string.

    LOOP AT it_number
         ASSIGNING FIELD-SYMBOL(<number>).
      rv_number = rv_number && <number>.
    ENDLOOP.
    IF mv_sign EQ mc_sign_negative.
      rv_number = mc_sign_negative && rv_number.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_STRING_TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RT_NUMBER                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_string_to_array.

    DATA(lv_position) = 0.
    WHILE lv_position LT strlen( iv_number ).
      APPEND iv_number+lv_position(1) TO rt_number.
      lv_position = lv_position + 1.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->DECIDE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD decide_sign.

    rv_sign = COND #( WHEN iv_number = mc_zero               THEN space
                      WHEN iv_number+0(1) = mc_sign_negative THEN mc_sign_negative
                      ELSE mc_sign_positive ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->INITIALIZE_ZERO
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD initialize_zero.

    mt_zero = VALUE #( ( 0 ) ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->REMOVE_NEGATIVE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove_negative_sign.

    rv_number = COND #( WHEN iv_number+0(1) = mc_sign_negative THEN iv_number+1
                        ELSE iv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->REVERSE_EQUAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EQUALS                      TYPE        I
* | [<-()] RV_EQUALS                      TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD reverse_equal.

    rv_equals = COND #( WHEN iv_equals =  1 THEN -1
                        WHEN iv_equals = -1 THEN 1 ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->REVERSE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_SIGN                        TYPE        CHAR01
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD reverse_sign.

    rv_sign = COND #( WHEN mv_sign = mc_sign_positive THEN mc_sign_negative
                      WHEN mv_sign = mc_sign_negative THEN mc_sign_positive
                      ELSE || ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->SUBTRACT_TWO_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS                      TYPE        TT_DIGITS
* | [--->] IT_DIGITS_TO_SUBTRACT          TYPE        TT_DIGITS
* | [<-()] RT_RESULT                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD subtract_two_numbers.

    DATA(pos_num) = lines( it_digits ).
    DATA(pos_num_to_subtract) = lines( it_digits_to_subtract ).
    DATA(remainder) = 0.
    DATA(result) = ||.

    WHILE pos_num             GT 0
       OR pos_num_to_subtract GT 0.
      DATA(digit) = 0.
      IF pos_num GT 0.
        digit = it_digits[ pos_num ].
        SUBTRACT 1 FROM pos_num.
      ENDIF.
      IF pos_num_to_subtract GT 0.
        digit = digit - it_digits_to_subtract[ pos_num_to_subtract ].
        SUBTRACT 1 FROM pos_num_to_subtract.
      ENDIF.
      digit = digit - remainder.
      remainder = 0.
      IF digit < 0.
        ADD 10 TO digit.
        remainder = 1.
      ENDIF.
      result = digit && result.
    ENDWHILE.

    IF remainder = 1.

    ENDIF.

    rt_result = convert_string_to_array( result ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ABS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~abs.

    CHECK mt_digits NE mt_zero.
    mv_sign = mc_sign_positive.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_ADD               TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~add.

    " Zero will be added, nothing changes
    IF io_number_to_add->to_array( ) = mt_zero.
      RETURN.
    ENDIF.

    " Number is zero, added number will be the result
    IF mt_digits = mt_zero.
      mt_digits = io_number_to_add->to_array( ).
      mv_sign = io_number_to_add->get_sign( ).
      RETURN.
    ENDIF.

    " Both numbers are positive or negative
    IF mv_sign = io_number_to_add->get_sign( ).
      mt_digits = add_two_numbers( it_digits        = mt_digits
                                   it_digits_to_add = io_number_to_add->to_array( ) ).
      RETURN.
    ENDIF.

    " One is positive, the other one is negative
    IF mv_sign <> io_number_to_add->get_sign( ).

      " Equal => zero
      IF mt_digits = io_number_to_add->to_array( ).
        mt_digits = mt_zero.
        mv_sign = space.
        RETURN.
      ELSEIF mv_sign = mc_sign_positive.
        " Copy, take abs, decide which is greater and subtract
        TRY.
            DATA(lo_number) = zcl_big_integer_factory=>create( io_number_to_add->to_string( ) ).
            lo_number->abs( ).
            DATA(equal) = equals( lo_number ).
            CASE equal.
              WHEN 1.
                mt_digits = subtract_two_numbers( it_digits             = mt_digits
                                                  it_digits_to_subtract = lo_number->to_array( ) ).
              WHEN -1.
                mt_digits = subtract_two_numbers( it_digits             = lo_number->to_array( )
                                                  it_digits_to_subtract = mt_digits ).
                mv_sign = mc_sign_negative.
            ENDCASE.
          CATCH zcx_no_valid_number.
        ENDTRY.
      ELSE.
        TRY.
            lo_number = zcl_big_integer_factory=>create( convert_array_to_string( mt_digits ) ).
            lo_number->abs( ).
            equal = lo_number->equals( io_number_to_add ).
            CASE equal.
              WHEN 1.
                mt_digits = subtract_two_numbers( it_digits             = lo_number->to_array( )
                                                  it_digits_to_subtract = io_number_to_add->to_array( ) ).
              WHEN -1.
                mt_digits = subtract_two_numbers( it_digits             = io_number_to_add->to_array( )
                                                  it_digits_to_subtract = lo_number->to_array( ) ).
                mv_sign = mc_sign_positive.
            ENDCASE.
          CATCH zcx_no_valid_number.
        ENDTRY.
      ENDIF.

    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~DIVIDE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_DIVIDE            TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~divide.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~EQUALS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RV_EQUAL                       TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~equals.

    " 1 inner number is greater
    " 0 equal
    " -1 outer number is greater

    IF mt_digits = mt_zero.
      " Inner number is zero, check sign of outer number
      rv_equal = SWITCH #( io_big_integer->get_sign( )
                           WHEN mc_sign_positive THEN -1
                           WHEN mc_sign_negative THEN 1
                           ELSE 0 ).
    ELSEIF io_big_integer->to_array( ) = mt_zero.
      " Outer number is zero, check sign of inner number
      rv_equal = SWITCH #( mv_sign
                           WHEN mc_sign_positive THEN 1
                           ELSE -1 ).
    ELSEIF mv_sign EQ mc_sign_positive.
      " Inner number is positive
      rv_equal = COND #( WHEN io_big_integer->get_sign( ) EQ mc_sign_negative THEN 1
                         WHEN lines( io_big_integer->to_array( ) ) > lines( mt_digits ) THEN -1
                         WHEN lines( io_big_integer->to_array( ) ) < lines( mt_digits ) THEN 1
                         ELSE compare_equal_length_numbers( io_big_integer->to_array( ) ) ).
    ELSE.
      " Inner number is negative
      rv_equal = COND #( WHEN io_big_integer->get_sign( ) EQ mc_sign_positive THEN -1
                         WHEN lines( io_big_integer->to_array( ) ) > lines( mt_digits ) THEN 1
                         WHEN lines( io_big_integer->to_array( ) ) < lines( mt_digits ) THEN -1
                         ELSE reverse_equal( compare_equal_length_numbers( io_big_integer->to_array( ) ) ) ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~GET_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~get_sign.

    rv_sign = mv_sign.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~MULTIPLY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_MULTIPLY          TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~multiply.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~SUBTRACT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_SUBTRACT          TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~subtract.

    " Zero will be subtracted, nothing changes
    IF io_number_to_subtract->to_array( ) = mt_zero.
      RETURN.
    ENDIF.

    " Number is zero, subtracted number will be the result
    IF mt_digits = mt_zero.
      mt_digits = io_number_to_subtract->to_array( ).
      mv_sign = reverse_sign( mv_sign ).
      RETURN.
    ENDIF.

    " Both are pos or neg
    IF mv_sign   = io_number_to_subtract->get_sign( ).
      " Numbers are the same => zero
      IF mt_digits = io_number_to_subtract->to_array( ).
        mt_digits = mt_zero.
        CLEAR mv_sign.
        RETURN.
      ELSE.

      ENDIF.
    ENDIF.

    " One is positive, the other one is negative
    IF mv_sign <> io_number_to_subtract->get_sign( ).

      " Numbers are equal, double of the original number
      IF mt_digits = io_number_to_subtract->to_array( ).
        mt_digits = add_two_numbers( it_digits        = mt_digits
                                     it_digits_to_add = io_number_to_subtract->to_array( ) ).
        RETURN.
      ELSE.
        mt_digits = add_two_numbers( it_digits = mt_digits
                                     it_digits_to_add = io_number_to_subtract->to_array( ) ).
        RETURN.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_DIGITS                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_array.

    rt_digits = mt_digits.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_string.

    rv_number = convert_array_to_string( mt_digits ).

  ENDMETHOD.
ENDCLASS.
