CLASS zcl_big_integer DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_big_integer .

    ALIASES abs
      FOR zif_big_integer~abs .
    ALIASES add
      FOR zif_big_integer~add .
    ALIASES divide
      FOR zif_big_integer~divide .
    ALIASES equals
      FOR zif_big_integer~equals .
    ALIASES get_sign
      FOR zif_big_integer~get_sign .
    ALIASES multiply
      FOR zif_big_integer~multiply .
    ALIASES subtract
      FOR zif_big_integer~subtract .
    ALIASES to_array
      FOR zif_big_integer~to_array .
    ALIASES to_string
      FOR zif_big_integer~to_string .
    ALIASES tt_digits
      FOR zif_big_integer~tt_digits .

    METHODS constructor
      IMPORTING
        !iv_number TYPE string .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CONSTANTS mc_sign_negative TYPE char01 VALUE '-' ##NO_TEXT.
    CONSTANTS mc_sign_positive TYPE char01 VALUE '+' ##NO_TEXT.
    CONSTANTS mc_zero TYPE string VALUE '0' ##NO_TEXT.
    DATA mt_digits TYPE tt_digits .
    DATA mv_number TYPE string .
    DATA mv_sign TYPE char01 .

    METHODS convert_string_to_array
      IMPORTING
        !iv_number       TYPE string
      RETURNING
        VALUE(rt_number) TYPE tt_digits .
    METHODS convert_array_to_string
      IMPORTING
        !it_number       TYPE tt_digits
      RETURNING
        VALUE(rv_number) TYPE string .
    METHODS decide_sign
      IMPORTING
        !iv_number     TYPE string
      RETURNING
        VALUE(rv_sign) TYPE char01 .
ENDCLASS.



CLASS zcl_big_integer IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    mv_number = iv_number.
    mv_sign = decide_sign( mv_number ).
    IF mv_number NE mc_zero.
      SHIFT mv_number LEFT DELETING LEADING '0'.
      IF mv_number+0(1) CN '123456789'.
        SHIFT mv_number LEFT BY 1 PLACES.
      ENDIF.
    ENDIF.
    mt_digits = convert_string_to_array( mv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_ARRAY_TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_NUMBER                      TYPE        TT_DIGITS
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_array_to_string.

    LOOP AT it_number
         ASSIGNING FIELD-SYMBOL(<number>).
      rv_number = rv_number && <number>.
    ENDLOOP.
    IF mv_sign EQ mc_sign_negative.
      rv_number = mc_sign_negative && rv_number.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_STRING_TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RT_NUMBER                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_string_to_array.

    DATA(lv_position) = 0.
    WHILE lv_position LT strlen( iv_number ).
      APPEND iv_number+lv_position(1) TO rt_number.
      lv_position = lv_position + 1.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->DECIDE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD decide_sign.

    rv_sign = COND #( WHEN iv_number = mc_zero               THEN space
                      WHEN iv_number+0(1) = mc_sign_negative THEN mc_sign_negative
                      ELSE mc_sign_positive ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ABS
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~abs.

    mv_sign = mc_sign_positive.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_ADD               TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~add.

    DATA result TYPE string.
    DATA(number_to_add) = io_number_to_add->to_array( ).
    DATA(pos_num) = lines( mt_digits ).
    DATA(pos_to_add) = lines( number_to_add ).
    DATA(remainder) = 0.

    WHILE pos_num    GT 0
       OR pos_to_add GT 0.
      DATA(digit) = remainder.
      remainder = 0.
      IF pos_num GT 0.
        digit = digit + mt_digits[ pos_num ].
        SUBTRACT 1 FROM pos_num.
      ENDIF.
      IF pos_to_add GT 0.
        digit = digit + number_to_add[ pos_to_add ].
        SUBTRACT 1 FROM pos_to_add.
      ENDIF.
      IF digit GT 9.
        SUBTRACT 10 FROM digit.
        remainder = 1.
      ENDIF.
      result = digit && result.
    ENDWHILE.

    mv_number = result.
    mt_digits = convert_string_to_array( mv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~DIVIDE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_DIVIDE            TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~divide.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~EQUALS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RV_EQUAL                       TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~equals.

    IF mv_number EQ io_big_integer->to_string( ).
      " Numbers are the same, check signs
      IF mv_sign                     EQ mc_sign_positive AND
         io_big_integer->get_sign( ) EQ mc_sign_negative.
        rv_equal = 1.
      ELSEIF mv_sign                     EQ mc_sign_negative AND
             io_big_integer->get_sign( ) EQ mc_sign_positive.
        rv_equal = -1.
      ELSE.
        rv_equal = 0.
      ENDIF.
    ELSEIF strlen( mv_number ) GT strlen( io_big_integer->to_string( ) ).
      " Number is longer, check the signs
      IF mv_sign EQ mc_sign_positive.
        rv_equal = 1.
      ELSE.
        IF io_big_integer->get_sign( ) EQ mc_sign_positive.
          rv_equal = -1.
        ENDIF.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~GET_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~get_sign.

    rv_sign = mv_sign.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~MULTIPLY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_MULTIPLY          TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~multiply.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~SUBTRACT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_SUBTRACT          TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~subtract.

    DATA result TYPE string.
    DATA(number_to_add) = io_number_to_subtract->to_array( ).
    DATA(pos_num) = lines( mt_digits ).
    DATA(pos_to_add) = lines( number_to_add ).
    DATA(remainder) = 0.

    WHILE pos_num    GT 0
       OR pos_to_add GT 0.
*      DATA(digit) = remainder.
*      remainder = 0.
*      IF pos_num GT 0.
*        digit = mt_digits[ pos_num ].
*        SUBTRACT 1 FROM pos_num.
*      ENDIF.
*      IF pos_to_add GT 0.
*        digit = digit + number_to_add[ pos_to_add ].
*        SUBTRACT 1 FROM pos_to_add.
*      ENDIF.
*      IF digit GT 9.
*        SUBTRACT 10 FROM digit.
*        remainder = 1.
*      ENDIF.
*      result = digit && result.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_DIGITS                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_array.

    rt_digits = mt_digits.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_string.

    rv_number = mv_number.

  ENDMETHOD.
ENDCLASS.
