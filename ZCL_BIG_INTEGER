CLASS zcl_big_integer DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_big_integer .

    ALIASES abs
      FOR zif_big_integer~abs .
    ALIASES add
      FOR zif_big_integer~add .
    ALIASES divide
      FOR zif_big_integer~divide .
    ALIASES equals
      FOR zif_big_integer~equals .
    ALIASES get_sign
      FOR zif_big_integer~get_sign .
    ALIASES multiply
      FOR zif_big_integer~multiply .
    ALIASES remainder
      FOR zif_big_integer~remainder .
    ALIASES subtract
      FOR zif_big_integer~subtract .
    ALIASES to_array
      FOR zif_big_integer~to_array .
    ALIASES to_string
      FOR zif_big_integer~to_string .
    ALIASES tt_digits
      FOR zif_big_integer~tt_digits .

    CONSTANTS mc_sign_negative TYPE char01 VALUE '-' ##NO_TEXT.
    CONSTANTS mc_sign_positive TYPE char01 VALUE '+' ##NO_TEXT.

    METHODS constructor
      IMPORTING
        !iv_number TYPE string
      RAISING
        zcx_no_valid_number .
  PROTECTED SECTION.
  PRIVATE SECTION.

    CONSTANTS mc_zero TYPE string VALUE '0' ##NO_TEXT.
    DATA mt_digits TYPE tt_digits .
    DATA mt_zero TYPE tt_digits .
    DATA mv_sign TYPE char01 .

    METHODS add_two_numbers
      IMPORTING
        !it_digits        TYPE tt_digits
        !it_digits_to_add TYPE tt_digits
      RETURNING
        VALUE(rv_result)  TYPE string .
    METHODS compare_equal_length_numbers
      IMPORTING
        !it_digits_to_compare TYPE tt_digits
      RETURNING
        VALUE(rv_equals)      TYPE i .
    METHODS convert_array_to_string
      IMPORTING
        !it_number       TYPE tt_digits
      RETURNING
        VALUE(rv_number) TYPE string .
    METHODS convert_string_to_array
      IMPORTING
        !iv_number       TYPE string
      RETURNING
        VALUE(rt_number) TYPE tt_digits .
    METHODS create_big_integer
      IMPORTING
        !iv_number            TYPE string
      RETURNING
        VALUE(ro_big_integer) TYPE REF TO zif_big_integer .
    METHODS decide_sign
      IMPORTING
        !iv_number     TYPE string
      RETURNING
        VALUE(rv_sign) TYPE char01 .
    METHODS initialize_zero .
    METHODS remove_negative_sign
      IMPORTING
        !iv_number       TYPE string
      RETURNING
        VALUE(rv_number) TYPE string .
    METHODS reverse_equal
      IMPORTING
        !iv_equals       TYPE i
      RETURNING
        VALUE(rv_equals) TYPE i .
    METHODS subtract_two_numbers
      IMPORTING
        !it_digits             TYPE tt_digits
        !it_digits_to_subtract TYPE tt_digits
      RETURNING
        VALUE(rv_result)       TYPE string .
ENDCLASS.



CLASS ZCL_BIG_INTEGER IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->ADD_TWO_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS                      TYPE        TT_DIGITS
* | [--->] IT_DIGITS_TO_ADD               TYPE        TT_DIGITS
* | [<-()] RV_RESULT                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_two_numbers.

    DATA(pos_num) = lines( it_digits ).
    DATA(pos_num_to_add) = lines( it_digits_to_add ).
    DATA(remainder) = 0.

    WHILE pos_num        GT 0
       OR pos_num_to_add GT 0.
      DATA(digit) = remainder.
      remainder = 0.
      IF pos_num GT 0.
        digit = digit + it_digits[ pos_num ].
        SUBTRACT 1 FROM pos_num.
      ENDIF.
      IF pos_num_to_add GT 0.
        digit = digit + it_digits_to_add[ pos_num_to_add ].
        SUBTRACT 1 FROM pos_num_to_add.
      ENDIF.
      IF digit GT 9.
        SUBTRACT 10 FROM digit.
        remainder = 1.
      ENDIF.
      rv_result = digit && rv_result.
    ENDWHILE.

    IF remainder EQ 1.
      rv_result = remainder && rv_result.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->COMPARE_EQUAL_LENGTH_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS_TO_COMPARE           TYPE        TT_DIGITS
* | [<-()] RV_EQUALS                      TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD compare_equal_length_numbers.

    CHECK lines( mt_digits ) = lines( it_digits_to_compare ).

    LOOP AT mt_digits
         ASSIGNING FIELD-SYMBOL(<ls_digit>).
      DATA(lv_digit) = it_digits_to_compare[ sy-tabix ].
      IF <ls_digit> EQ lv_digit.
        CONTINUE.
      ELSEIF <ls_digit> GT lv_digit.
        rv_equals = 1.
        RETURN.
      ELSE.
        rv_equals = -1.
        RETURN.
      ENDIF.
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [!CX!] ZCX_NO_VALID_NUMBER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.

    initialize_zero( ).

    DATA(lv_number) = iv_number.

    SHIFT lv_number LEFT DELETING LEADING '0'.

    IF lv_number IS INITIAL.
      lv_number = |0|.
    ELSEIF strlen( lv_number ) EQ 1.
      IF lv_number CN |0123456789|.
        RAISE EXCEPTION TYPE zcx_no_valid_number.
      ENDIF.
    ELSE.
      IF lv_number+0(1) CN |0123456789+-| OR
         lv_number+1    CN |0123456789|.
        RAISE EXCEPTION TYPE zcx_no_valid_number.
      ENDIF.
    ENDIF.

    mv_sign = decide_sign( lv_number ).

    " Remove sign
    IF lv_number+0(1) CN |0123456789|.
      SHIFT lv_number LEFT BY 1 PLACES.
    ENDIF.

    mt_digits = convert_string_to_array( lv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_ARRAY_TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_NUMBER                      TYPE        TT_DIGITS
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_array_to_string.

    LOOP AT it_number
         ASSIGNING FIELD-SYMBOL(<number>).
      rv_number = rv_number && <number>.
    ENDLOOP.
    IF mv_sign EQ mc_sign_negative.
      rv_number = mc_sign_negative && rv_number.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CONVERT_STRING_TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RT_NUMBER                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD convert_string_to_array.

    DATA(lv_position) = 0.
    WHILE lv_position LT strlen( iv_number ).
      APPEND iv_number+lv_position(1) TO rt_number.
      lv_position = lv_position + 1.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->CREATE_BIG_INTEGER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_big_integer.

    TRY.
        ro_big_integer = zcl_big_integer_factory=>create( iv_number ).
      CATCH zcx_no_valid_number.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->DECIDE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD decide_sign.

    rv_sign = COND #( WHEN iv_number = mc_zero               THEN space
                      WHEN iv_number+0(1) = mc_sign_negative THEN mc_sign_negative
                      ELSE mc_sign_positive ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->INITIALIZE_ZERO
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD initialize_zero.

    mt_zero = VALUE #( ( 0 ) ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->REMOVE_NEGATIVE_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_NUMBER                      TYPE        STRING
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD remove_negative_sign.

    rv_number = COND #( WHEN iv_number+0(1) = mc_sign_negative THEN iv_number+1
                        ELSE iv_number ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->REVERSE_EQUAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] IV_EQUALS                      TYPE        I
* | [<-()] RV_EQUALS                      TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD reverse_equal.

    rv_equals = COND #( WHEN iv_equals =  1 THEN -1
                        WHEN iv_equals = -1 THEN 1 ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_BIG_INTEGER->SUBTRACT_TWO_NUMBERS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IT_DIGITS                      TYPE        TT_DIGITS
* | [--->] IT_DIGITS_TO_SUBTRACT          TYPE        TT_DIGITS
* | [<-()] RV_RESULT                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD subtract_two_numbers.

    " it_digits_to_subtract always has to be the lower number
    DATA(pos_num) = lines( it_digits ).
    DATA(pos_num_to_subtract) = lines( it_digits_to_subtract ).
    DATA(remainder) = 0.

    WHILE pos_num             GT 0
       OR pos_num_to_subtract GT 0.
      DATA(digit) = 0.
      IF pos_num GT 0.
        digit = it_digits[ pos_num ].
        SUBTRACT 1 FROM pos_num.
      ENDIF.
      IF pos_num_to_subtract GT 0.
        digit = digit - it_digits_to_subtract[ pos_num_to_subtract ].
        SUBTRACT 1 FROM pos_num_to_subtract.
      ENDIF.
      digit = digit - remainder.
      remainder = 0.
      IF digit < 0.
        ADD 10 TO digit.
        remainder = 1.
      ENDIF.
      rv_result = digit && rv_result.
    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ABS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~abs.

    TRY.
        ro_big_integer = CAST zif_big_integer( NEW zcl_big_integer( remove_negative_sign( to_string( ) ) ) ).
      CATCH zcx_no_valid_number.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~ADD
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_ADD               TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~add.

    DATA result TYPE string.

    IF io_number_to_add->to_array( ) = mt_zero.
      " Zero will be added, nothing changes
      result = to_string( ).

    ELSEIF mt_digits = mt_zero.
      " Number is zero, added number will be the result
      result = io_number_to_add->to_string( ).

    ELSEIF mv_sign = io_number_to_add->get_sign( ).
      " Both numbers are positive or negative
      result = add_two_numbers( it_digits        = mt_digits
                                it_digits_to_add = io_number_to_add->to_array( ) ).
      IF mv_sign EQ mc_sign_negative.
        result = mc_sign_negative && result.
      ENDIF.

    ELSE.
      " One is positive, the other one is negative
      IF mt_digits = io_number_to_add->to_array( ).
        " Equal numbers => result is zero
        result = mc_zero.

      ELSEIF mv_sign = mc_sign_positive.
        TRY.
            DATA(lo_number) = zcl_big_integer_factory=>create( remove_negative_sign( io_number_to_add->to_string( ) ) ).
            DATA(equal) = lo_number->equals( me ).
            CASE equal.
              WHEN 1.
                result = subtract_two_numbers( it_digits             = lo_number->to_array( )
                                               it_digits_to_subtract = mt_digits ).
                result = mc_sign_negative && result.
              WHEN -1.
                result = subtract_two_numbers( it_digits             = mt_digits
                                               it_digits_to_subtract = lo_number->to_array( ) ).
            ENDCASE.
          CATCH zcx_no_valid_number.
        ENDTRY.

      ELSE.
        TRY.
            lo_number = zcl_big_integer_factory=>create( remove_negative_sign( to_string( ) ) ).
            equal = lo_number->equals( io_number_to_add ).
            CASE equal.
              WHEN 1.
                result = subtract_two_numbers( it_digits             = lo_number->to_array( )
                                               it_digits_to_subtract = io_number_to_add->to_array( ) ).
                result = mc_sign_negative && result.
              WHEN -1.
                result = subtract_two_numbers( it_digits             = io_number_to_add->to_array( )
                                               it_digits_to_subtract = lo_number->to_array( ) ).
            ENDCASE.
          CATCH zcx_no_valid_number.
        ENDTRY.
      ENDIF.
    ENDIF.

    TRY.
        ro_big_integer = zcl_big_integer_factory=>create( result ).
      CATCH zcx_no_valid_number.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~DIVIDE
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_DIVIDE            TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* | [!CX!] CX_SY_ZERODIVIDE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~divide.

    DATA result TYPE string.

    IF io_number_to_divide->to_array( ) = mt_zero.
      " No division by zero
      RAISE EXCEPTION TYPE cx_sy_zerodivide.

    ELSEIF mt_digits = mt_zero.
      " Zero divided by any number = zero
      result = |0|.

    ELSE.
      IF mt_digits = io_number_to_divide->to_array( ).
        " Numbers are the same => result is one
        result = |1|.
        IF mv_sign <> io_number_to_divide->get_sign( ).
          result = mc_sign_negative && result.
        ENDIF.
      ELSE.
        " Check which is greater in abs value
        DATA(lo_number) = abs( ).
        DATA(lo_number_to_divide) = io_number_to_divide->abs( ).
        DATA(equal) = lo_number->equals( lo_number_to_divide ).
        CASE equal.
          WHEN -1.
            result = mc_zero.
          WHEN 1.
            DATA(counter) = 0.
            TRY.
                WHILE lo_number->equals( zcl_big_integer_factory=>create( mc_zero ) ) EQ 1.
                  DATA(number) = subtract_two_numbers( it_digits             = lo_number->to_array( )
                                                       it_digits_to_subtract = lo_number_to_divide->to_array( ) ).
                  TRY.
                      lo_number = zcl_big_integer_factory=>create( number ).
                    CATCH zcx_no_valid_number.
                  ENDTRY.
                  result = result + 1.
                ENDWHILE.
              CATCH zcx_no_valid_number.
            ENDTRY.
            CONDENSE result NO-GAPS.
            IF get_sign( ) <> io_number_to_divide->get_sign( ).
              result = mc_sign_negative && result.
            ENDIF.
        ENDCASE.
      ENDIF.
    ENDIF.

    TRY.
        ro_big_integer = zcl_big_integer_factory=>create( result ).
      CATCH zcx_no_valid_number.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~EQUALS
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RV_EQUAL                       TYPE        I
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~equals.

    " 1 inner number is greater
    " 0 equal
    " -1 outer number is greater

    IF mt_digits = mt_zero.
      " Inner number is zero, check sign of outer number
      rv_equal = SWITCH #( io_big_integer->get_sign( )
                           WHEN mc_sign_positive THEN -1
                           WHEN mc_sign_negative THEN 1
                           ELSE 0 ).
    ELSEIF io_big_integer->to_array( ) = mt_zero.
      " Outer number is zero, check sign of inner number
      rv_equal = SWITCH #( mv_sign
                           WHEN mc_sign_positive THEN 1
                           ELSE -1 ).
    ELSEIF mv_sign EQ mc_sign_positive.
      " Inner number is positive
      rv_equal = COND #( WHEN io_big_integer->get_sign( ) EQ mc_sign_negative THEN 1
                         WHEN lines( io_big_integer->to_array( ) ) > lines( mt_digits ) THEN -1
                         WHEN lines( io_big_integer->to_array( ) ) < lines( mt_digits ) THEN 1
                         ELSE compare_equal_length_numbers( io_big_integer->to_array( ) ) ).
    ELSE.
      " Inner number is negative
      rv_equal = COND #( WHEN io_big_integer->get_sign( ) EQ mc_sign_positive THEN -1
                         WHEN lines( io_big_integer->to_array( ) ) > lines( mt_digits ) THEN 1
                         WHEN lines( io_big_integer->to_array( ) ) < lines( mt_digits ) THEN -1
                         ELSE reverse_equal( compare_equal_length_numbers( io_big_integer->to_array( ) ) ) ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~GET_SIGN
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_SIGN                        TYPE        CHAR01
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~get_sign.

    rv_sign = mv_sign.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~MULTIPLY
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_MULTIPLY          TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~multiply.

    DATA result TYPE string.

    IF mt_digits                          = mt_zero OR
       io_number_to_multiply->to_array( ) = mt_zero.
      " One of the numbers is zero => result is zero
      result = mc_zero.

    ELSEIF to_string( ) = |1|.
      result = io_number_to_multiply->to_string( ).

    ELSEIF io_number_to_multiply->to_string( ) = |1|.
      result = to_string( ).

    ELSE.
      " Adding x-1 times
      result = remove_negative_sign( to_string( ) ).
      DO ( CONV i( remove_negative_sign( io_number_to_multiply->to_string( ) ) ) - 1 ) TIMES.
        result = add_two_numbers( it_digits        = mt_digits
                                  it_digits_to_add = convert_string_to_array( result ) ).
      ENDDO.
      IF mv_sign NE io_number_to_multiply->get_sign( ).
        result = mc_sign_negative && result.
      ENDIF.

    ENDIF.

    ro_big_integer = create_big_integer( result ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~REMAINDER
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_DIVIDE            TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* | [!CX!] CX_SY_ZERODIVIDE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~remainder.

    DATA result TYPE string.

    IF io_number_to_divide->to_string( ) = mc_zero.
      " No division by zero
      RAISE EXCEPTION TYPE cx_sy_zerodivide.
    ENDIF.

    IF mt_digits = mt_zero.
      result = mc_zero.
    ELSE.
      IF mv_sign                          = mc_sign_positive AND
         io_number_to_divide->get_sign( ) = mc_sign_positive.
        TRY.
            DATA(lo_number) = zcl_big_integer_factory=>create( to_string( ) ).
          CATCH zcx_no_valid_number.
        ENDTRY.
        WHILE lo_number->equals( io_number_to_divide ) >= 0.
          lo_number = lo_number->subtract( io_number_to_divide ).
        ENDWHILE.
        result = lo_number->to_string( ).
      ENDIF.
    ENDIF.

    ro_big_integer = create_big_integer( result ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~SUBTRACT
* +-------------------------------------------------------------------------------------------------+
* | [--->] IO_NUMBER_TO_SUBTRACT          TYPE REF TO ZIF_BIG_INTEGER
* | [<-()] RO_BIG_INTEGER                 TYPE REF TO ZIF_BIG_INTEGER
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~subtract.

    DATA result TYPE string.

    IF io_number_to_subtract->to_array( ) = mt_zero.
      " Zero will be subtracted, nothing changes
      result = to_string( ).

    ELSEIF mt_digits = mt_zero.
      " Number is zero, subtracted number will be the result with reversed sign
      result = io_number_to_subtract->to_string( ).
      IF result+0(1) = mc_sign_negative.
        SHIFT result LEFT BY 1 PLACES.
      ELSE.
        result = mc_sign_negative && result.
      ENDIF.

    ELSE.
      " None of the numbers is zero
      IF to_string( ) = io_number_to_subtract->to_string( ).
        " Numbers are the same => result is zero
        result = mc_zero.

      ELSEIF mv_sign = mc_sign_positive.
        " First nunmber is positive
        IF io_number_to_subtract->get_sign( ) = mc_sign_negative.
          " positive minus negative => add
          result = add_two_numbers( it_digits = mt_digits
                                    it_digits_to_add = io_number_to_subtract->to_array( ) ).
        ELSE.
          " Both are pos, decide which is greater and subtract
          DATA(equal) = equals( io_number_to_subtract ).
          CASE equal.
            WHEN 1.
              result = subtract_two_numbers( it_digits             = mt_digits
                                             it_digits_to_subtract = io_number_to_subtract->to_array( ) ).
            WHEN -1.
              result = subtract_two_numbers( it_digits             = io_number_to_subtract->to_array( )
                                             it_digits_to_subtract = mt_digits ).
              result = mc_sign_negative && result.
          ENDCASE.
        ENDIF.
      ELSE.
        " Number is negative
        IF io_number_to_subtract->get_sign( ) = mc_sign_positive.
          " Negative minus positive => add and make negative
          result = add_two_numbers( it_digits = mt_digits
                                    it_digits_to_add = io_number_to_subtract->to_array( ) ).
          result = mc_sign_negative && result.
        ELSE.
          " Negative minus negative => decide which is greater
          equal = equals( io_number_to_subtract ).
          CASE equal.
            WHEN 1.
              result = subtract_two_numbers( it_digits             = io_number_to_subtract->to_array( )
                                             it_digits_to_subtract = mt_digits ).
            WHEN -1.
              result = subtract_two_numbers( it_digits             = mt_digits
                                             it_digits_to_subtract = io_number_to_subtract->to_array( ) ).
              result = mc_sign_negative && result.
          ENDCASE.
        ENDIF.
      ENDIF.
    ENDIF.

    ro_big_integer = create_big_integer( result ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_ARRAY
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RT_DIGITS                      TYPE        TT_DIGITS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_array.

    rt_digits = mt_digits.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_BIG_INTEGER->ZIF_BIG_INTEGER~TO_STRING
* +-------------------------------------------------------------------------------------------------+
* | [<-()] RV_NUMBER                      TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_big_integer~to_string.

    rv_number = convert_array_to_string( mt_digits ).

  ENDMETHOD.
ENDCLASS.
